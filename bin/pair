#!/usr/bin/env ruby

# Configures the git author to a list of developers when pair programming
# 
# Usage: pair lm bh (Sets the author to 'Luke Melia and Bryan Helmkamp')
#        pair       (Unsets the author so the git global config takes effect)
# 
# Author: Bryan Helmkamp (http://brynary.com)
# Author: Rod Hilton and Adam Esterline

#######################################################################
## Configuration

EMAIL_PREFIX = "pair"
EMAIL_SUFFIX = "@duprasville.com"
AUTHORS = {}

@pair_initials = ARGV

authors_file = File.expand_path(File.join(__FILE__, '..', '..', 'etc', '.authors'))

unless File.exists?(authors_file)
  puts "You do not have an .authors file in the repository."
  puts "Repository needs a file named .authors in the following format:"
  puts "  ck Clark Kent"
  puts "  bw Bruce Wayne"
  puts "  pp Peter Parker"
  puts "  ap Ass Pirate"
  exit 1
end

# Read the local .authors file, parsing to get the AUTHORS map
File.open(authors_file).each_line do |line|
  initials, name, email = line.match(/^(\w+)\s+([^\,]*)\,?(.*)$/).captures
  name = name.chomp
  email = email.strip
  email = email.length > 0 ? email : "#{initials}#{EMAIL_SUFFIX}"
  if(AUTHORS.has_key?(initials)) 
    puts "Duplicate initials for #{initials}"
    exit 1
  end
  AUTHORS[initials] = {:name => name, :email => email}
end

authors = @pair_initials.map do |initials|
  if AUTHORS[initials.downcase]
    AUTHORS[initials.downcase][:name]
  else
    puts "Couldn't find author name for initials: #{initials}"
    exit 1
  end
end

if authors.any?
  if authors.size == 1
    authors = authors.first
  elsif authors.size == 2
    authors = authors.join(" and ")
  else
    authors = authors[0..-2].join(", ") + " and " + authors.last
  end
  
  email = AUTHORS[@pair_initials.first.downcase][:email]
  puts "#{ENV['PWD']}"
  `git config --local user.name '#{authors}'`
  `git config --local user.email '#{email}'`
  
  puts "user.name = #{authors}"
  puts "user.email = #{email}"
else
  `git config --local --unset user.name`
  `git config --local --unset user.email`
  
  puts "Unset user.name and user.email"
end
